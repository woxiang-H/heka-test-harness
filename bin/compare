#!/usr/bin/env bash
set -euo pipefail

# Init lib.
# shellcheck source=SCRIPTDIR/../lib/vector-test-harness/init.sh
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)/../lib/vector-test-harness/init.sh"

#
# Usage
#

register_usage <<END
USAGE
   compare -t test [-s subject] [-c configuration] [-p]

DESCRIPTION
   Prints a simple table that compares the average test times
   across all subjects on all tests.

OPTIONS
   -c, --configuration  The test configuration (default: default)
   -p, --percentages    To include percentage increase from test winner (default: false)
   -s, --subject        The subject name (ex: vector,fluentbit,etc)
   -t, --test           The test name (ex: tcp_to_blackhole,etc)
   -v, --version        The subject version(s) to compare (ex: 0.8.0,nightly/latest,nightly/2020-03-14,dev-branch-1-6305861,etc)
   -r, --repair         Detect new test results before running the comparison.
   -h, --help           Print this message.

EXAMPLES
   ./compare -t tcp_to_tcp_performance
   ./compare -t tcp_to_tcp_performance -s vector
   ./compare -t tcp_to_tcp_performance -s vector -v nightly/latest -v dev-branch-count-sha
END

#
# Dependencies
#

ensure_athena_dependencies_available
ensure_commad_available "ruby"
ensure_echanced_getopt_available

#
# Defaults
#

PERCENTAGES="true"
REPAIR="false"
SUBJECT_NAME=""
SUBJECT_VERSIONS=()
TEST_CONFIGURATION="default"
TEST_NAME=""

#
# Flags
#

OPTIONS="c:prs:t:v:h"
LONGOPTS="configuration:,percentage,repair,subject:,test:,version:,help"
PARSED="$(parse_arguments "$OPTIONS" "$LONGOPTS" "$0" "$@")"
eval set -- "$PARSED"

while true; do
  case "$1" in
  -c | --configuration)
    TEST_CONFIGURATION="$2"
    shift 2
    ;;
  -p | --percentages)
    PERCENTAGES="true"
    shift
    ;;
  -r | --repair)
    REPAIR="true"
    shift
    ;;
  -s | --subject)
    SUBJECT_NAME="$2"
    shift 2
    ;;
  -t | --test)
    TEST_NAME="$2"
    shift 2
    ;;
  -v | --version)
    SUBJECT_VERSIONS+=("$2")
    shift 2
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  --)
    shift
    break
    ;;
  *)
    fail_arg_invalid "Invalid option detected: $1"
    ;;
  esac
done

#
# Requirements
#

if [ -z "$TEST_NAME" ]; then
  fail_arg_invalid "Error: you must supply a test name via the -t flag"
fi

#
# Header
#

print_vector_logo
print_divider
cat <<END
Test Comparison
Test name: ${TEST_NAME}
Test configuration: ${TEST_CONFIGURATION}
Subject: ${SUBJECT_NAME}
Versions: ${SUBJECT_VERSIONS[*]}
END
print_divider

#
# Repair
#

if [[ "$REPAIR" == "true" ]]; then
  EXECUTION_ID=$(athena_execute_query "MSCK REPAIR TABLE vector_tests")
fi

#
# Execute
#

TEST_NAME_CONDITION='1 = 1'
if [ -n "$TEST_NAME" ]; then
  TEST_NAME_CONDITION="v.name = '$TEST_NAME' AND v.configuration = '$TEST_CONFIGURATION'"
fi

SUBJECT_NAME_CONDITION='1 = 1'
SUBJECT_GROUP_CONDITION='subject'
if [ -n "$SUBJECT_NAME" ]; then
  SUBJECT_NAME_CONDITION="v.subject = '$SUBJECT_NAME'"
  SUBJECT_GROUP_CONDITION='v.subject, v.version'
fi

SUBJECT_VERSION_CONDITIONS=()
for version in "${SUBJECT_VERSIONS[@]}"
do
  SUBJECT_VERSION_CONDITIONS+=("v.version = '${version}'")
done

SUBJECT_VERSION_CONDITION='1 = 1'
if (( ${#SUBJECT_VERSION_CONDITIONS[@]} )); then
  SUBJECT_VERSION_CONDITION=$(join " OR " "${SUBJECT_VERSION_CONDITIONS[@]}")
else
  SUBJECT_VERSION_CONDITION="v.version NOT LIKE 'dev-%' AND v.version NOT LIKE 'nightly/%'"
fi

WHERE_CLAUSE="(${TEST_NAME_CONDITION}) AND (${SUBJECT_NAME_CONDITION}) AND (${SUBJECT_VERSION_CONDITION})"

EXECUTION_ID="$(athena_execute_query "$(cat <<EOF
WITH
latest_versions AS (
  SELECT
    subject,
    MAX(version) AS version
  FROM vector_tests v
  WHERE ${WHERE_CLAUSE}
  GROUP BY $SUBJECT_GROUP_CONDITION
)

SELECT
  name,
  configuration,
  subject,
  version,
  COUNT(*) AS count,
  AVG(duration) AS duration_avg,
  MAX(duration) AS duration_max,
  AVG(cpu_sys_avg) AS cpu_sys_avg,
  AVG(cpu_usr_avg) AS cpu_usr_avg,
  AVG(cpu_sys_max) AS cpu_sys_max,
  AVG(cpu_usr_max) AS cpu_usr_max,
  AVG(load_avg_1m) AS load_avg_1m,
  AVG(mem_used_avg) AS mem_used_avg,
  AVG(mem_used_max) AS mem_used_max,
  AVG(disk_read_avg) AS disk_read_avg,
  AVG(disk_read_sum) AS disk_read_sum,
  AVG(disk_writ_sum) AS disk_writ_sum,
  AVG(io_read_sum) AS io_read_sum,
  AVG(io_writ_sum) AS io_writ_sum,
  AVG(net_recv_avg) AS net_recv_avg,
  AVG(net_recv_sum) AS net_recv_sum,
  AVG(net_send_sum) AS net_send_sum,
  AVG(sock_total_sum) AS sock_total_sum,
  AVG(tcp_act_sum) AS tcp_act_sum,
  AVG(tcp_syn_sum) AS tcp_syn_sum,
  AVG(tcp_clo_sum) AS tcp_clo_sum
FROM (
  SELECT
    v.name,
    v.configuration,
    v.subject,
    v.version,
    v.timestamp,
    MAX(epoch) - MIN(epoch) AS duration,
    AVG(cpu_sys) AS cpu_sys_avg,
    AVG(cpu_usr) AS cpu_usr_avg,
    MAX(cpu_sys) AS cpu_sys_max,
    MAX(cpu_usr) AS cpu_usr_max,
    AVG(load_avg_1m) AS load_avg_1m,
    AVG(mem_used) AS mem_used_avg,
    MAX(mem_used) AS mem_used_max,
    (SUM(disk_read) / (MAX(epoch) - MIN(epoch))) AS disk_read_avg,
    SUM(disk_read) AS disk_read_sum,
    SUM(disk_writ) AS disk_writ_sum,
    SUM(io_read) AS io_read_sum,
    SUM(io_writ) AS io_writ_sum,
    (SUM(net_recv) / (MAX(epoch) - MIN(epoch))) AS net_recv_avg,
    SUM(net_recv) AS net_recv_sum,
    SUM(net_send) AS net_send_sum,
    SUM(sock_total) AS sock_total_sum,
    SUM(tcp_act) AS tcp_act_sum,
    SUM(tcp_syn) AS tcp_syn_sum,
    SUM(tcp_clo) AS tcp_clo_sum
  FROM vector_tests v
  INNER JOIN latest_versions ON
    latest_versions.subject = v.subject
    AND latest_versions.version = v.version
  WHERE ${WHERE_CLAUSE}
  GROUP BY v.name, v.configuration, v.subject, v.version, v.timestamp
)
GROUP BY name, configuration, subject, version
ORDER BY subject, version ASC
EOF
)")"

RESULTS=$(athena_get_results "$EXECUTION_ID")

if [ -z "$TEST_NAME" ]; then
  "$VECTOR_TEST_HARNESS_UTILS_DIR/print_compare_all" "$RESULTS"
else
  "$VECTOR_TEST_HARNESS_UTILS_DIR/print_compare_test" "$RESULTS" "$SUBJECT_NAME" "$PERCENTAGES"
fi
